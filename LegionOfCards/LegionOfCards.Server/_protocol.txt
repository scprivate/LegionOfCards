-- Das Protokoll --
Dieses Dokument dient zur Dokumentation des Legion of Cards-Protokoll oder kurz LoCaP [ausgesprochen: Lowcap]

-- Datenverkehr --
Der Datenverkehr zwischen Frontend (Webseite / HTML & JavaScript) und unserem Backend (C#) funktioniert über JSON-Pakete welche über WebSockets versendet und empfangen werden.
Dabei besteht ein JSON-Paket aus einem Schlüssel (Packetname oder Packetkey) und den Informationen in Form einer Object-Array (Packetargs / Packetargumente).
Sendet man ein Paket zu der anderen Seite so wird dieses auf der Empfängerseite über EventHandler empfangen, sortiert und über registrierte Callbacks an die Verarbeitungsschnittstellen weitergegeben.

Damit es keine Konflikte der Paketschlüssel gibt, gibt es Lowcap. Hier werden alle Paketschlüssel, Richtungen, Informationen und Beschreibungen aufgelistet und dokumentiert.

-- Schema --
Damit keine Verwirrung in der Dokumentation entsteht, gibt es ein bestimmtes Schema, welches sowohl beim Benennen der Paketschlüssel, als auch bei der Dokumentation einzuhalten gibt.

Paketschlüssel:
Bei den Paketschlüssel gilt es, dass diese keine Leerzeichen enthalten. Leerzeichen werden ersetz durch Bindestriche (-). Ebenso ist der komplette Schlüssel in Lower-Case und Worte die aus mehr als einem Wort
bestehen werden mit Unterstrichen (_) getrennt. Bsp: send-player_password

Dokumentationsschema:
Da wir nun wissen, wie ein Paketschlüssel auszusehen hat, gilt es nun nur noch die Dokumentationsform einzuhalten. Dabei wird bitte folgendes Schema eingehalten:

PAKETSCHLÜSSEL:
[RICHTUNG (F->B oder B->F; B=Backend, F=Frontend)]
{
	ARGUMENTE (TYP: NAME)
}
> BESCHREIBUNG

==========================================================================================================================================================

==========================================================================================================================================================

-- Account-Pakete --

ping_session:
[F->B]
{
	string: Session Token (Dieser Token wird in den Cookies gespeichert)
}
> Das ist ein Test-Paket, welches direkt am Anfang gesendet wird um zu gucken ob noch eine bestehende Session existiert oder ein Login angefordert werden muss.
Ebenso dient diese Paket zur Überprüfung der Verbindung zu den Blocs.

ping_result:
[B->F]
{
	bool: sessionFound
	string: userID,
	string: token (Session Token)
}

check-creation_data:
[F->B]
{
	string: username
	string: email
}
> Prüft, ob der gegebene Name existiert. Nach dem Empfang dieses Paketes wird ein "creation_data-check_result"-Paket zurückgesendet.

creation_data-check_result:
[B->F]
{
	int: resultCode (0 = alles ok, 1 = email existiert, 2 = username existiert, 3 = beides existiert, -1 = Fehler ist aufgetreten)
}
> Dieses Paket dient zur Aufklärung des "check-creation_data"-Paketes. Es sagt dem Frontend, ob die Anfrage fehlgeschlagen ist oder Erfolg hatte.

create-account:
[F->B]
{
	string: username
	string: email
	string: password
}
> Sendet eine Account-Erstellungsanfrage an den Server. Dort wird die Anfrage bearbeitet und durch ein "account-creation_result"-Paket der Status zum Frontend übertragen.

account-creation_result:
[B->F]
{
	bool: success (false = Fehler ist aufgetreten, true = Account konnte erstellt werden)
}
> Dieses Paket dient zur Aufklärung des "create-account"-Paketes. Es sagt dem Frontend, ob die Anfrage fehlgeschlagen ist oder Erfolg hatte.

request-discord_verification:
[F->B]
{
	string: accessToken (Session Token | Die Session muss überpürft werden, ob diese noch gültig ist)	
}
> Fordert einen Verifikationslink für die Discord-Verknüpfung vom Server an.

send-discord_verify_url:
[B->F]
{
	string: verifyUrl
}
> Sendet den angeforderten Verifikationslink zum Frontend zurück, um die Verifikation zu beginnen.

check-password:
[F->B]
{
	string: identifier (Kann entweder Username oder Email sein)
	string: password
}
> Prüft, ob der Account vom gegebenen "identifier" existiert und ob das angegebene Passwort richtig ist. Nachdem die Anfrage bearbeitet wurde, wird ein "session-result"-Paket zurück gesendet.

session-result:
[B->F]
{
	bool: success
	string: userID,
	string: token (Session Token)
}
> Dieses Paket dient zur Aufklärung des "password-check_result"-Paketes. Es sagt dem Frontend, ob die Anfrage fehlgeschlagen ist oder Erfolg hatte und liefert bei Erfolg die UserID des angefragten Accounts.

logut-session:
[F->B]
{
	string: userID
	string: accessToken (Session Token)
}
> Das Paket fordert den Server auf, die Session vom gegebenen Session Token zu zerstören und jegliche spielerbezogene Daten zu speichern.

session-destroyed:
[B->F]
> Das Paket sagt dem Frontend, dass die Session zerstört wurde und nun neugeladen werden kann.

delete-account:
[F->B]
{
	string: accessToken (Session Token)
}
> Fordert den Server auf alle Daten des Users zu löschen und die Session zu zerstören.

account-deletion_failure:
[B->F]
> Teilt dem Frontend mit, dass bei der Löschung ein Fehler aufgetreten ist.